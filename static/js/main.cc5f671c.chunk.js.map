{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedTasks","handleChange","event","target","name","value","setState","this","props","todos","chooseUser","selectedUser","checkboxHandler","currentTodos","filter","todo","title","userId","toLowerCase","includes","completed","className","type","onChange","placeholder","map","key","id","ClassNames","readOnly","checked","onClick","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","CurrentUser","user","getUser","prevProps","email","phone","clear","App","selectedUserId","checkboxCompletedHandler","taskId","userClear","todosList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc5f671c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTasks: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, chooseUser, selectedUser, checkboxHandler } = this.props;\n    const { query, selectedTasks } = this.state;\n\n    const currentTodos = todos\n      .filter(todo => todo.title !== '' && todo.userId !== null)\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (selectedTasks === 'Active') {\n          return !todo.completed;\n        }\n\n        if (selectedTasks === 'Completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Filters:\n          {' '}\n          <input\n            type=\"text\"\n            className=\"TodoList__name-filter\"\n            name=\"query\"\n            value={this.state.query}\n            onChange={this.handleChange}\n            placeholder=\"Search by title\"\n          />\n        </label>\n        <select\n          name=\"selectedTasks\"\n          value={this.state.selectedTasks}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {currentTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={ClassNames('TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onChange={() => {\n                      checkboxHandler(todo.id);\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={ClassNames(\n                    'TodoList__user-button',\n                    'button',\n                    // eslint-disable-next-line max-len\n                    { 'TodoList__user-button--selected': todo.userId === selectedUser },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    chooseUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n  })).isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  chooseUser: PropTypes.func.isRequired,\n  checkboxHandler: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const requestTodos = () => request('/todos');\nexport const requestUser = id => request(`/users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { requestUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  async getUser() {\n    const user = await requestUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    if (!this.state.user) {\n      return null;\n    }\n\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"button CurrentUser__clear\"\n          type=\"button\"\n          onClick={() => {\n            this.props.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { requestTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todosList = await requestTodos();\n\n    this.setState({ todos: todosList });\n  }\n\n  chooseUser = (userId) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: +userId });\n    }\n  }\n\n  checkboxCompletedHandler = (taskId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === taskId) {\n          return ({\n            ...todo,\n            completed: !todo.completed,\n          });\n        }\n\n        return {\n          ...todo,\n        };\n      }),\n    }));\n  }\n\n  userClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            chooseUser={this.chooseUser}\n            selectedUser={selectedUserId}\n            checkboxHandler={this.checkboxCompletedHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.userClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}